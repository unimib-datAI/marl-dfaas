import marimo

__generated_with = "0.17.0"
app = marimo.App(width="medium")

with app.setup:
    from pathlib import Path
    import json

    import marimo as mo

    import networkx as nx
    import numpy as np
    import pandas as pd

    import utils


@app.cell(hide_code=True)
def _():
    mo.md(
        r"""
    # Rejection rate of experiments

    This notebook presents the rejection rate of experiments (evaluation episodes) in comparison with several baselines, including the optimal centralized case.
    """
    )
    return


@app.cell
def _():
    mo.md(r"""## Experiment loading""")
    return


@app.cell(hide_code=True)
def _():
    exp_dir_widget = mo.ui.file_browser(
        initial_path=Path("results"), selection_mode="directory", multiple=False, label="Experiment path: "
    )

    exp_dir_widget
    return (exp_dir_widget,)


@app.cell
def _(exp_dir_widget):
    # exp_dir_widget.path() is None at the start of the notebook! So we wait until a directory
    # has been selected.
    mo.stop(exp_dir_widget.path() is None)

    _exp_dir = exp_dir_widget.path().resolve().absolute()

    # Read evaluation.json a a list of dict. In this case it is already an array
    # of dict, one for each iteration.
    _eval_path = _exp_dir / "evaluation.json"
    with _eval_path.open() as _file:
        eval_data = json.load(_file)

    env = utils.get_env(_exp_dir)

    mo.md(f"""
    **Experiment prefix dir**: `{_exp_dir.parent.as_posix()!r}`  
    **Experiment name**:       `{_exp_dir.name!r}`  
    **Agents**:                 {env.agents}  
    **Evaluations**:            {len(eval_data)}
    """)
    return env, eval_data


@app.cell
def _():
    mo.md(r"""### Network topology""")
    return


@app.cell
def _(env):
    def make_networkx_plot(graph):
        fig = utils.get_figure("network")
        ax = fig.subplots()

        ax.axis("off")

        options = {
            "ax": ax,
            "node_size": 2500,
            "node_color": "white",
            "edgecolors": "black",
        }

        ax.set_axisbelow(True)

        nx.draw_networkx(graph, **options)

        return fig

    make_networkx_plot(env.network)
    return


@app.function
def check_same_seed(eval_data):
    """Check if all evaluation iterations have the same seeds."""
    seeds = eval_data[0]["env_runners"]["hist_stats"]["seed"]

    for eval_iter in eval_data:
        check_seeds = eval_iter["env_runners"]["hist_stats"]["seed"]
        iter = eval_iter["iteration"]

        if seeds != check_seeds:
            raise ValueError(f"Found different seed at iteration {iter}")


@app.cell
def _(eval_data):
    # Perform a sanity check over evaluation data.
    check_same_seed(eval_data)
    return


@app.cell(hide_code=True)
def _():
    mo.md(
        r"""
    ### Load centralized model results

    Before calculating the rejection rate (both absolute and percentage) for the current experiment, we first load the optimal result generated by the custom model located in the `model/` directory.
    """
    )
    return


@app.cell
def _():
    def load_model_result(path):
        """
        Load episode data from a directory.

        Expects a directory named "0_seed_XXXXX" containing an "obj.csv" file.

        Returns a DataFrame with reject rates and the seed in attrs["seed"].
        """
        seed = path.name.split("_")[-1]  # Format: "0_seed_XXXXX"

        data = pd.read_csv(path / "obj.csv")
        data.attrs["seed"] = int(seed)
        data.columns = ["reject_rate", "reject_rate_perc"]

        return data

    def load_model_results(base_dir):
        """
        Load all episode data from subdirectories in base_dir.

        Returns a dict mapping seed values to their DataFrames.
        """
        models_data = {}
        for episode in Path(base_dir).iterdir():
            data = load_model_result(episode)
            models_data[data.attrs["seed"]] = data

        return models_data

    return (load_model_results,)


@app.cell
def _(load_model_results):
    models_data = load_model_results("model_results/")
    return (models_data,)


@app.cell(hide_code=True)
def _():
    mo.md(
        r"""
    ### Load "all local" model results

    Before calculating the rejection rate (both absolute and percentage) for the current experiment, we first load the "all local" result generated by the custom model located in the `baseline_local/` directory.
    """
    )
    return


@app.function
def load_baseline_local_results(base_dir):
    data = {}

    # Iterate over all episodes under the base_dir. Each episode is a sub-directory.
    for episode in Path(base_dir).iterdir():
        seed = episode.name.split("_")[-1]  # Format: "0_seed_XXXXX"

        by_agent = pd.read_csv(episode / "results_by_agent.csv")
        all = pd.read_csv(episode / "results_all.csv")

        data[int(seed)] = {"by_agent": by_agent, "all": all}

    return data


@app.cell
def _():
    baseline_local = load_baseline_local_results("baseline_local/")
    return (baseline_local,)


@app.cell(hide_code=True)
def _():
    mo.md(r"""## Iteration and episode selection""")
    return


@app.function
def get_input_reject_rate_episode(iter_data, episode_idx):
    agents = iter_data["env_runners"]["hist_stats"]["reward"][episode_idx].keys()
    seed = iter_data["env_runners"]["hist_stats"]["seed"][episode_idx]
    steps = iter_data["env_runners"]["hist_stats"]["episode_lengths"][episode_idx]

    # This will be needed for the special "all" agent.
    all_agent_input_rate = np.zeros(steps)
    all_agent_total_reject = np.zeros(steps)

    # Iterate over agents.
    steps_agent = {}
    for agent in agents:
        obs_input_rate = np.array(iter_data["env_runners"]["hist_stats"]["observation_input_rate"][episode_idx][agent])

        action_reject = np.array(iter_data["env_runners"]["hist_stats"]["action_reject"][episode_idx][agent])

        local_reject = np.array(
            iter_data["env_runners"]["hist_stats"]["incoming_rate_local_reject"][episode_idx][agent]
        )

        forward_reject = np.array(iter_data["env_runners"]["hist_stats"]["forward_reject_rate"][episode_idx][agent])

        total_reject = action_reject + local_reject + forward_reject

        steps_agent[f"{agent}_input_rate"] = obs_input_rate
        steps_agent[f"{agent}_total_reject"] = total_reject

        all_agent_input_rate += obs_input_rate
        all_agent_total_reject += total_reject

    steps_agent["all_input_rate"] = all_agent_input_rate
    steps_agent["all_total_reject"] = all_agent_total_reject

    data = pd.DataFrame(steps_agent, columns=sorted(steps_agent))
    data.attrs["seed"] = seed

    return data


@app.function
def get_input_reject_rate_iteration(iters_data, iteration_idx):
    episodes = iters_data[iteration_idx]["env_runners"]["episodes_this_iter"]

    iter_data = {}
    for episode_idx in range(episodes):
        episode_data = get_input_reject_rate_episode(iters_data[iteration_idx], episode_idx)

        seed = episode_data.attrs["seed"]
        iter_data[seed] = episode_data

    return iter_data


@app.cell
def _(eval_data):
    # Iteration index widget selector.
    iteration_idx_widget = mo.ui.number(
        start=0, value=len(eval_data) - 1, stop=len(eval_data) - 1, debounce=True, label="Iteration number: "
    )
    iteration_idx_widget
    return (iteration_idx_widget,)


@app.cell
def _(eval_data):
    # Seed selector.
    _seeds = eval_data[0]["env_runners"]["hist_stats"]["seed"]
    seed_widget = mo.ui.dropdown(options=_seeds, value=str(_seeds[0]), label="Seed: ")

    seed_widget
    return (seed_widget,)


@app.cell
def _(eval_data, iteration_idx_widget):
    input_reject_data = get_input_reject_rate_iteration(eval_data, iteration_idx_widget.value)
    return (input_reject_data,)


@app.cell(hide_code=True)
def _():
    mo.md(r"""## Reject total agents (single episode)""")
    return


@app.function
def make_total_reject_plot(episode_reject_data, episode_model_data, baseline_local):
    from matplotlib.ticker import PercentFormatter

    figures = []

    # Absolute.
    fig = utils.get_figure("total_reject")
    ax = fig.subplots()

    ax.plot(episode_reject_data["all_total_reject"], label="Trained")
    ax.plot(episode_model_data["reject_rate"], label="Global optima")
    ax.plot(baseline_local["all"]["reject_rate"], label="All local")

    ax.set_title("Reject rate per step (total nodes)")
    ax.set_ylabel("Reject rate")
    ax.set_xlabel("Step")
    ax.legend()
    ax.grid(axis="both")
    ax.set_axisbelow(True)
    figures.append(mo.mpl.interactive(fig))

    # Percentual
    fig = utils.get_figure("total_reject_perc")
    ax = fig.subplots()

    # Just to make sure...
    assert episode_reject_data["all_input_rate"].equals(baseline_local["all"]["input_rate"])

    percentage_train = episode_reject_data["all_total_reject"] / episode_reject_data["all_input_rate"]
    percentage_model = episode_model_data["reject_rate_perc"] / 100
    percentage_baseline_local = baseline_local["all"]["reject_rate"] / baseline_local["all"]["input_rate"]

    ax.plot(percentage_train, label="Trained")
    ax.plot(percentage_model, label="Global optima")
    ax.plot(percentage_baseline_local, label="All local")

    ax.set_title("Reject rate per step (total nodes)")
    ax.set_ylabel("Reject rate over input rate")
    ax.yaxis.set_major_formatter(PercentFormatter(1.0))
    ax.set_xlabel("Step")
    ax.legend()
    ax.grid(axis="both")
    ax.set_axisbelow(True)
    figures.append(mo.mpl.interactive(fig))

    return mo.vstack(figures)


@app.cell
def _(
    baseline_local,
    input_reject_data,
    iteration_idx_widget,
    models_data,
    seed_widget,
):
    _text = mo.md(f"""Iteration: {iteration_idx_widget.value}  
    Episode seed: {seed_widget.value}""")
    _figs = make_total_reject_plot(
        input_reject_data[seed_widget.value], models_data[seed_widget.value], baseline_local[seed_widget.value]
    )

    mo.vstack([_text, _figs])
    return


@app.cell(hide_code=True)
def _():
    mo.md(r"""## Reject single agents (single episode)""")
    return


@app.function
def make_reject_plot(input_reject_data, env, seed):
    from matplotlib.ticker import MaxNLocator

    figures = []
    for agent in env.agents:
        fig = utils.get_figure(f"reject_{agent}")
        ax = fig.subplots()

        ax.plot(input_reject_data[seed][f"{agent}_total_reject"], label=agent)

        ax.set_title(f"Reject rate per step {agent}")
        ax.set_ylabel("Reject rate")
        ax.yaxis.set_major_locator(MaxNLocator(integer=True))
        ax.set_xlabel("Step")
        ax.legend()
        ax.grid(axis="both")
        ax.set_axisbelow(True)

        figures.append(mo.mpl.interactive(fig))

    return mo.vstack(figures)


@app.cell
def _(env, input_reject_data, iteration_idx_widget, seed_widget):
    _text = mo.md(f"""Iteration: {iteration_idx_widget.value}  
    Episode seed: {seed_widget.value}""")
    _figs = make_reject_plot(input_reject_data, env, seed_widget.value)

    mo.vstack([_text, _figs])
    return


@app.cell(hide_code=True)
def _():
    mo.md(r"""## Reject total agent (all episodes)""")
    return


@app.function
def get_total_reject_episode(input_reject_data, models_data):
    seeds = input_reject_data.keys()

    data = []
    for seed in seeds:
        total_input_rate = input_reject_data[seed]["all_input_rate"].sum()
        total_reject_rate = input_reject_data[seed]["all_total_reject"].sum()
        total_reject_perc = total_reject_rate / total_input_rate if total_input_rate > 0 else 0

        total_reject_rate_optima = models_data[seed]["reject_rate"].sum()
        total_reject_rate_optima_perc = total_reject_rate_optima / total_input_rate if total_input_rate > 0 else 0

        data.append(
            {
                "seed": seed,
                "total_input_rate": total_input_rate,
                "total_reject_rate": total_reject_rate,
                "total_reject_rate_optima": total_reject_rate_optima,
                "total_reject_perc": total_reject_perc,
                "total_reject_rate_optima_perc": total_reject_rate_optima_perc,
            }
        )

    return pd.DataFrame(data)


@app.cell
def _(input_reject_data, models_data):
    total_reject_episode = get_total_reject_episode(input_reject_data, models_data)

    _text = mo.md("Episode summary:")

    mo.vstack([_text, total_reject_episode])
    return (total_reject_episode,)


@app.cell
def _(total_reject_episode):
    _total_reject_perc_avg = total_reject_episode["total_reject_perc"].mean() * 100
    _total_reject_perc_std = total_reject_episode["total_reject_perc"].std() * 100

    _total_reject_rate_optima_perc_avg = total_reject_episode["total_reject_rate_optima_perc"].mean() * 100
    _total_reject_rate_optima_perc_std = total_reject_episode["total_reject_rate_optima_perc"].std() * 100

    mo.md(f"""
    Average total reject rate across episodes: {_total_reject_perc_avg:.2f}% ± {_total_reject_perc_std:.2f}%  
    Average total reject rate across episodes (optima): {_total_reject_rate_optima_perc_avg:.2f}% ± {_total_reject_rate_optima_perc_std:.2f}%
    """)
    return


if __name__ == "__main__":
    app.run()
